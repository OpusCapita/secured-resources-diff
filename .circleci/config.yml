version: 2.1

orbs:
  git: opuscapita/git@volatile

jobs:
  inject-environment:
    docker:
      - image: opuscapita/minsk-core-machineuser-env:1
    steps:
      - run:
          name: Inject secrets from vault to CircleCI project's environment
          command: |
            circle_ci_add_env.sh \
              DOCKER_USER DOCKER_PASS \
              AZURE_USER AZURE_PASS \
              MINSK_CORE_AZURE_SUBSCRIPTION_ID MINSK_CORE_K8S_AZURE_RG MINSK_CORE_K8S_AZURE_NAME \
              MINSK_CORE_K8S_DEMO_DEPLOYMENTS_HOST \
              MINSK_CORE_SLACK_CI_WEBHOOK_URL \
              MAVEN_REPO JFROG_USER JFROG_PASSWD

  build:
    docker:
      - image: opuscapita/minsk-core-cd:1
        auth:
          username: ${DOCKER_USER}
          password: ${DOCKER_PASS}
    working_directory: ~/build
    steps:
      - run:
          name: Check required environment variables
          command: |
            assert-vars.sh \
              AZURE_USER AZURE_PASS \
              MINSK_CORE_AZURE_SUBSCRIPTION_ID MINSK_CORE_K8S_AZURE_RG MINSK_CORE_K8S_AZURE_NAME \
              MINSK_CORE_K8S_DEMO_DEPLOYMENTS_HOST \
              MINSK_CORE_SLACK_CI_WEBHOOK_URL \
              MAVEN_REPO JFROG_USER JFROG_PASSWD
      - git/checkout-with-submodules
      - run:
          name: Login to cluster
          command: |
            aks-login.sh \
              --azure-user="${AZURE_USER}" \
              --azure-pass="${AZURE_PASS}" \
              --subscription="${MINSK_CORE_AZURE_SUBSCRIPTION_ID}" \
              --azure-rg="${MINSK_CORE_K8S_AZURE_RG}" \
              --cluster-name="${MINSK_CORE_K8S_AZURE_NAME}"
      - run:
          name: Prepare namespace
          # setup a separate namespace in k8s for development installation,
          # and make sure imagePullSecret is present in this namespace before trying to deploy anything
          command: |
            setup-dev-namespace.sh \
              --name=$( generate-k8s-resource-name.sh "dev-${CIRCLE_PROJECT_REPONAME}-$( get-source-branch.sh )" ) \
              --gh-repo-link="https://github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}" \
              --gh-branch=$( get-source-branch.sh ) \
              --gh-commit=$( get-source-commit.sh ) \
              --ci-build-url="${CIRCLE_BUILD_URL}"
      - run:
          name: Copy over required secrets
          command: |
            copy-secrets.sh \
              --to-namespace=$( generate-k8s-resource-name.sh "dev-${CIRCLE_PROJECT_REPONAME}-$( get-source-branch.sh )" ) \
              --secret="machineuser-vault-master-secret" \
              --secret="${MINSK_CORE_K8S_DEMO_DEPLOYMENTS_HOST}"-tls
      - run:
          name: Install/upgrade helm release
          command: |
            GITHUB_PROJECT="${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
            APPLICATION_URL_PATH="/${CIRCLE_PROJECT_REPONAME}/$( get-source-branch.sh | xargs generate-k8s-resource-name.sh )"
            APPLICATION_URL="http://${MINSK_CORE_K8S_DEMO_DEPLOYMENTS_HOST}${APPLICATION_URL_PATH}"
            BRANCH=$( get-source-branch.sh )
            COMMIT=$( get-source-commit.sh )
            DOCKER_IMAGE_REPOSITORY=$( get-docker-repository.sh )
            DOCKER_IMAGE_TAG=$( get-docker-tag.sh )

            # change to chart folder
            cd ./helm/chart

            # configure $HELM_HOME
            helm init --client-only

            # put Helm dependencies into correct folder
            helm dependency update

            NAMESPACE=$( generate-k8s-resource-name.sh "dev-${CIRCLE_PROJECT_REPONAME}-$( get-source-branch.sh )" )
            echo "NAMESPACE '${NAMESPACE}'"

            # install/update release
            helm upgrade \
              --install \
              --force \
              --set image.repository="${DOCKER_IMAGE_REPOSITORY}" \
              --set image.tag="${DOCKER_IMAGE_TAG}" \
              \
              --set ingress.host="${MINSK_CORE_K8S_DEMO_DEPLOYMENTS_HOST}" \
              --set ingress.path="${APPLICATION_URL_PATH}" \
              \
              --set artifactory.mavenRepoUrl="${MAVEN_REPO}" \
              --set artifactory.userName="${JFROG_USER}" \
              --set artifactory.userPassword="${JFROG_PASSWD}" \
              \
              --set dockerSecret="dockerhub" \
              --set github-status-deployment-link.github.user="${GH_NAME}" \
              --set github-status-deployment-link.github.password="${GH_PASS}" \
              --set github-status-deployment-link.github.project="${GITHUB_PROJECT}" \
              --set github-status-deployment-link.github.ref="${COMMIT}" \
              --set github-status-deployment-link.url="${APPLICATION_URL}" \
              --set selfkiller.azureAks.resourceGroup="${MINSK_CORE_K8S_AZURE_RG}" \
              --set selfkiller.azureAks.clusterName="${MINSK_CORE_K8S_AZURE_NAME}" \
              --set selfkiller.image.repository="${DOCKER_IMAGE_REPOSITORY}" \
              --set selfkiller.image.tag="${DOCKER_IMAGE_TAG}" \
              --set selfkiller.github.project="${GITHUB_PROJECT}" \
              --set selfkiller.github.branch="${BRANCH}" \
              --set slack-notifications.webhook="${MINSK_CORE_SLACK_CI_WEBHOOK_URL}" \
              --set slack-notifications.github.user="${CIRCLE_USERNAME}" \
              --set slack-notifications.github.project="${GITHUB_PROJECT}" \
              --set slack-notifications.github.branch="${BRANCH}" \
              --set slack-notifications.github.ref="${COMMIT}" \
              --set slack-notifications.ci.jobUrl="${CIRCLE_BUILD_URL}" \
              --set slack-notifications.link.url="${APPLICATION_URL}" \
              --set sync-secrets.secrets="{${MINSK_CORE_K8S_DEMO_DEPLOYMENTS_HOST}-tls,dockerhub,machineuser-vault-master-secret}" \
              --namespace $NAMESPACE \
              $NAMESPACE \
              .

workflows:
  version: 2
  deploy-to-cloud:
    jobs:
      - inject-environment
      - build:
          requires:
            - inject-environment
