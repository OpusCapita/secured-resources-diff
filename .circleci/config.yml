version: 2.1

aliases:
  - &restore-cache-grails
    keys:
      - maven
  - &save-cache-grails
    key: maven
    paths:
      - ~/.m2/repository
      - target/projects/prov/plugins

docker_and_working_directory: &docker_and_working_directory
  docker:
    - image: opuscapita/minsk-core-ci:1
  working_directory: ~/build

jobs:
  inject-environment:
    docker:
      - image: opuscapita/minsk-core-machineuser-env:1
    steps:
      - run:
          name: Inject secrets from vault to CircleCI project's environment
          command: |
            circle_ci_add_env.sh \
              DOCKER_USER DOCKER_PASS \
              GH_NAME GH_MAIL
  build:
    <<: *docker_and_working_directory
    steps:
      - checkout
      - restore_cache:
          keys:
            - maven
      - run:
          name: Refresh dependencies
          command: grails refresh-dependencies --non-interactive
      - run:
          name: Build appliation artifact
          command: grails war -Dgrails.env=prod -verbose
      - save_cache:
          key: maven
          paths:
            - ~/.m2/repository

  build-docker:
    <<: *docker_and_working_directory
    steps:
      - checkout
      - run: *calculate-docker-variables
      - setup_remote_docker
      - run:
          name: Build appliation docker image and push it into repository
          command: |
            set -eo pipefail

            NAME=$(cat application.properties | grep app.name | cut -d'=' -f2)
            VERSION=$(cat application.properties | grep app.version | cut -d'=' -f2)

            # Calculate docker repository and tag names
            GITHUB_PROJECT="${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
            DOCKER_REPOSITORY="$(echo ${GITHUB_PROJECT} | tr '[:upper:]' '[:lower:]')"
            DOCKER_TAG=$( generate-docker-tag.sh $CIRCLE_BRANCH )

            # docker login as we 1) might use private images in Docker file already 2) push application image into central repo later
            docker login -u "${DOCKER_USER}" -p "${DOCKER_PASS}"

            # build image
            docker build --no-cache \
              --build-arg WAR_PATH=./target/$NAME-$VERSION.war \
              --build-arg NAME="${NAME}" \
              --build-arg VERSION="${VERSION}" \
              --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
              --build-arg VCS_URL="${CIRCLE_REPOSITORY_URL}" \
              --build-arg VCS_REF="${CIRCLE_SHA1}" \
              -t "${DOCKER_REPOSITORY}:${DOCKER_AG}" .

            # push app image
            docker push "${DOCKER_REPOSITORY}:${DOCKER_TAG}"

            # trigger deployment
            trigger-continuous-deployment.sh \
              --github-name=${GH_NAME} \
              --github-mail=$GH_MAIL} \
              --source-branch=${CIRCLE_BRANCH} \
              --source-commit=${CIRCLE_SHA1} \
              --docker-repository=${DOCKER_REPOSITORY} \
              --docker-tag=${DOCKER_TAG}

workflows:
  version: 2
  build-and-deploy-to-cloud:
    jobs:
      - inject-environment
      - build:
          requires:
            - inject-environment
      - build-docker:
          requires:
            - inject-environment
            - build
