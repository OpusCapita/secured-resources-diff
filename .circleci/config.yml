version: 2

defaults: &defaults
  docker:
    - image: opuscapita/minsk-core-ci:grails-2.4.4-jdk-8u131-nodejs-8.9.4-maven-3.3.9
  working_directory: ~/build

aliases:
  - &inject-environment
    name: Inject environment
    command: /bin/env_inject.sh

jobs:
  build:
    <<: *defaults
    steps:
      - run: *inject-environment
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - 'v1-documentation-{{ .Branch }}-{{ checksum "grails-app/conf/BuildConfig.groovy" }}'
            - 'v1-documentation-{{ .Branch }}'
            - v1-documentation
      - run:
          name: Refresh grails dependencies
          command: grails refresh-dependencies --non-interactive
      - run:
          name: Deploy.
          command: grails maven-deploy -Dgrails.env=prod -verbose
      - run:
          name: Deploy docker image
          working_directory: ~/build/.docker
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            ./docker-build.sh --git-branch
            ./docker-push.sh --git-branch

      - save_cache:
          key: 'v1-documentation-{{ .Branch }}-{{ checksum "grails-app/conf/BuildConfig.groovy" }}'
          paths:
            - ~/.m2/repository

  deploy-demo:
    docker:
      - image: opuscapita/minsk-core-ci:grails-2.4.4-jdk-8u131-nodejs-8.9.4-maven-3.3.9
    working_directory: ~/build
    steps:
      - run: *inject-environment
      - checkout
      - run:
          name: Commit to continuous-deployment branch
          command: |
            DOCKER_IMAGE_REPOSITORY="opuscapita/$(.docker/get-name.sh)"
            DOCKER_IMAGE_TAG="$(.docker/get-docker-tag.sh --git-branch)"

            git config --global user.email "${GH_MAIL}"
            git config --global user.name "${GH_NAME}"
            git checkout continuous-deployment

            message=$(mktemp)

            cat << EOF >$message
            Deploy ${CIRCLE_BRANCH} at ${CIRCLE_SHA1}

            [branch:${CIRCLE_BRANCH}]
            [commit:${CIRCLE_SHA1}]
            [docker_image_repository:${DOCKER_IMAGE_REPOSITORY}]
            [docker_image_tag:${DOCKER_IMAGE_TAG}]
            EOF

            n=0
            until [ $n -ge 5 ]; do
              git fetch origin
              git reset --hard @{u}
              git commit --allow-empty -F $message
              git push && break
              n=$[$n+1]
            done

            if [ $n -ge 5 ]; then
              echo "Failed to push 5 times, exiting."
              exit 1
            fi

workflows:
  version: 2
  build:
    jobs:
      - build
      - deploy-demo:
          requires:
            - build
