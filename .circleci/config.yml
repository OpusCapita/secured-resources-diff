version: 2.1

defaults: &defaults
  docker:
    - image: opuscapita/minsk-core-ci:grails-2.4.4-jdk-8u131-nodejs-8.9.4-maven-3.3.9
  working_directory: ~/build

aliases:
  - &inject-environment
    name: Inject environment
    command: /bin/env_inject.sh
  - &calculate-docker-variables
    name: Calculate docker repository and tag names
    command: |
      slugify() { echo $1 | iconv -t ascii//TRANSLIT | sed -E s/[^a-zA-Z0-9]+/-/g | sed -E s/^-+\|-+$//g | tr A-Z a-z | cut -c1-53; }
      GITHUB_PROJECT="${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
      DOCKER_IMAGE_REPOSITORY="$(echo ${GITHUB_PROJECT} | tr '[:upper:]' '[:lower:]')"
      DOCKER_IMAGE_TAG="$(slugify ${CIRCLE_BRANCH})"
      echo "export DOCKER_IMAGE_REPOSITORY=${DOCKER_IMAGE_REPOSITORY}" >> ${BASH_ENV}
      echo "export DOCKER_IMAGE_TAG=${DOCKER_IMAGE_TAG}" >> ${BASH_ENV}
jobs:
  build:
    <<: *defaults
    steps:
      - run: *inject-environment
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - maven
      - run:
          name: Refresh dependencies
          command: grails refresh-dependencies --non-interactive
      - run:
          name: Build appliation artifact
          command: grails war -Dgrails.env=prod -verbose
      - save_cache:
          key: maven
          paths:
            - ~/.m2/repository
      - run: *calculate-docker-variables
      - run:
          name: Build appliation docker image and push it into repository
          command: |
            NAME=$(cat application.properties | grep app.name | cut -d'=' -f2)
            VERSION=$(cat application.properties | grep app.version | cut -d'=' -f2)
            # docker login as we 1) might use private images in Docker file already 2) push application image into central repo later
            docker login -u "${DOCKER_USER}" -p "${DOCKER_PASS}"
            # build image
            docker build --no-cache \
              --build-arg WAR_PATH=./target/$NAME-$VERSION.war \
              --build-arg VCS_URL="${CIRCLE_REPOSITORY_URL}" \
              --build-arg VCS_REF="${CIRCLE_SHA1}" \
              --build-arg NAME="${NAME}" \
              --build-arg VERSION="${VERSION}" \
              --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
              -t "${DOCKER_IMAGE_REPOSITORY}:${DOCKER_IMAGE_TAG}" .
            # push app image
            docker push "${DOCKER_IMAGE_REPOSITORY}:${DOCKER_IMAGE_TAG}"

  # deploy:
  #   docker:
  #     - image: opuscapita/minsk-core-ci:grails-2.4.4-jdk-8u131-nodejs-8.9.4-maven-3.3.9
  #   working_directory: ~/build
  #   steps:
  #     - run: *inject-environment
  #     - checkout
  #     - run: *calculate-docker-variables
  #     - run:
  #         name: Commit to continuous-deployment branch
  #         command: |
  #           git config --global user.email "${GH_MAIL}"
  #           git config --global user.name "${GH_NAME}"
  #           git checkout continuous-deployment
  #           message=$(mktemp)
  #           cat \<< EOF >$message
  #           Deploy ${CIRCLE_BRANCH} at ${CIRCLE_SHA1}
  #           [branch:${CIRCLE_BRANCH}]
  #           [commit:${CIRCLE_SHA1}]
  #           [docker_image_repository:${DOCKER_IMAGE_REPOSITORY}]
  #           [docker_image_tag:${DOCKER_IMAGE_TAG}]
  #           EOF
  #           n=0
  #           until [ $n -ge 5 ]; do
  #             git fetch origin
  #             git reset --hard @{u}
  #             git commit --allow-empty -F $message
  #             git push && break
  #             n=$[$n+1]
  #           done
  #           if [ $n -ge 5 ]; then
  #             echo "Failed to push 5 times, exiting."
  #             exit 1
  #           fi

workflows:
  version: 2
  build-and-deploy-to-cloud:
    jobs:
      - build
      # - deploy:
      #     requires:
      #       - build
