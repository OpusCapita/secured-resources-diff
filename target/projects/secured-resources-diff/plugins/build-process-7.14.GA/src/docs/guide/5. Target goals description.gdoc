The grails-build-process plugin (the Plugin) contains some additional tasks that bind on standard grails goals and execute automatically when an application or a plugin building. Lets see diper on the Plugins tasks.

h3. Generate external API docs (obsolete)

This task bind onto standard 'doc' goal and execute after standard grails docs was builded. It use external-api-tool plugin to generate external api docs (standard java API docs, but included only classes marked with _com.jcatalog.util.annotation.Api_ annotation) for current artifact by creating and calling ExternalApiDocGenerator. As a result the external api docs will be placed into target folder.
There are some configuration properties for this task. All properties has the same prefix _grails.doc.externalApi_.
{table}
*Name* | *Default value* | *Description*
*additionalRoots* | | A list of file paths to folders that should be added to sources roots.
*inceptionYear* | | From this year the application was started developing.
*organizationName* | "jCatalog Software AG." | The name of an developer's organization.
*organizationUrl* | "http://www.jcatalog.com/" | The developer's site.
*outputPath* | "externalapidocs" | The output folder for generated docs (relative to standard grails docs path).
*projectName* | Grails application name | The project name.
*projectVersion* | Grails application version | The project version
{table}

h3. Web-xml servlet filters re-order

This task bind onto web.xml file prepared event and rewrite it to re-order servlet filters according to webXmlFilterOrder property in a grails application Config.groovy. Example of order configuration:
{code}
webxml {
    final int DEFAULT_POSITION = 500
    final int RELOAD_POSITION = 2000
    final int SITEMESH_POSITION = 3000
    final int URL_MAPPING_POSITION = 4000
    webXmlFilterOrder = [
            'charEncodingFilter' : DEFAULT_POSITION - 450,   // Must be first in chain!
            'grailsWebRequest': DEFAULT_POSITION - 400,
            'Acegi Filter Chain Proxy': DEFAULT_POSITION - 350,
            'DeclaredResourcesPluginFilter': DEFAULT_POSITION - 300,
            'AdHocResourcesPluginFilter': DEFAULT_POSITION - 250,
            'reloadFilter': RELOAD_POSITION,
            'ResourcesDevModeFilter': RELOAD_POSITION + 100,
            'sitemesh': SITEMESH_POSITION,
            'urlMapping': URL_MAPPING_POSITION
    ]
}
{code}
The first filter will be the filter with minimal position.

h3. Update customization area resources (is going to be deleted as soon as customization area is placed inside the application)
To use this goal just run
{code}grails updateCustomizationAreaResources <path-to-customization-area>{code}
This script find all plugins, used in application and gather all *i18n* and *gsp* files (that have appropriate extension and located in the standard grails folders). After that Script does the same in customization area, using path *web-app/plugins/<plugin name>/(i18n|views)*. After that it it compares files and build list of added, modified and deleted files in plugins relative to customization area. After that the plugin make new branch in customization area (or update on existing one) named as *<current branch name>-plugins*. Pay your attention that customizationarea should be stay on the branch you want to merge and should be updated to the last revision. All changes found by this script will be committed into plugins branch and after that customization area will be updated to original branch. If any error occurs the script thrown exception in console.

h3. AddPluginResourcesToCustomizationArea

This task cops all resources (css, js, images, views and i18n files) to application customization area. This goal is needed for creating final application release.

h3. Deploy generated documentation to the pre configured folder
To use this goal just run
{code}grails doc-deploy{code}
Target deployment root directory should be available by usage property 'grails.project.docs.deploy.path' which should be defined in 'settings.groovy' file that is placed in '<user home>/.grails' directory.
Current Grails application/plugin documentation will be copied from 'target/docs' folder to the following directory:
{code}<grails.project.docs.deploy.path> / <groupId> / <artifactId> / <version> /{code}
If documentation exists by given path, it will be rewritten.
{note}
*[Groups, Artifacts and Versions|http://grails.org/doc/2.1.x/guide/conf.html#versioning] are required variables!*
For projects _groupId_ is taken from property _grails.project.groupId_ in _Config.groovy_.
For plugins _groupId_ and _version_ are taken from the following properties in the _GrailsPlugin.groovy_ descriptor. For example:
{code}
String groupId = 'com.jcatalog.test'
String version = 'SNAPSHOT'
{code}
{note}
